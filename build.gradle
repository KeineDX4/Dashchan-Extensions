buildscript {
	repositories {
		google()
		mavenCentral()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:3.6.4'
	}
}

allprojects {
	repositories {
		google()
		mavenCentral()
	}
}

class GenerateFileTask extends DefaultTask {
	@Input String inputText
	@OutputFile File outputFile

	@TaskAction
	def action() {
		outputFile.write(inputText)
	}
}

def configureCommon(project, manifestFile) {
	project.android {
		compileSdkVersion 30
		buildToolsVersion '30.0.2'

		defaultConfig {
			minSdkVersion 16
			targetSdkVersion 30
		}

		sourceSets.main {
			manifest.srcFile manifestFile
			java.srcDirs = ['src']
			resources.srcDirs = []
			aidl.srcDirs = ['src']
			renderscript.srcDirs = ['src']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}

		compileOptions {
			sourceCompatibility JavaVersion.VERSION_1_8
			targetCompatibility JavaVersion.VERSION_1_8
		}
	}
}

project.ext.set 'configureLibrary', { project ->
	project.apply plugin: 'com.android.library'

	def packageName = 'chan.library.' + project.name
	def xml = '<?xml version="1.0" encoding="utf-8"?>\n' +
			'<manifest xmlns:android="http://schemas.android.com/apk/res/android" ' +
			"package=\"$packageName\" />"

	def manifestFile = new File(project.buildDir, 'generated/AndroidManifest.xml')
	if (!manifestFile.exists()) {
		// Fixes IntelliJ Android plugin error
		manifestFile.parentFile.mkdirs()
		manifestFile.write(xml)
	}

	project.preBuild.dependsOn(project.task('generateManifest', type: GenerateFileTask) {
		inputText = xml
		outputFile = manifestFile
	})

	configureCommon(project, manifestFile)
}

project.ext.set 'configureExtension', { project, data ->
	project.apply plugin: 'com.android.application'

	def keyNotFound = { throw new NullPointerException(it + ' is not defined') }

	def chanName = project.name
	def packageName = data['packageName'] ?: 'com.mishiranu.dashchan.chan.' + chanName
	def chanNameUpper = data['chanNameUpper'] ?: chanName.take(1).toUpperCase() + chanName.substring(1)
	def versionName = data['versionName'] ?: keyNotFound('versionName')
	def apiVersion = data['apiVersion'] ?: keyNotFound('apiVersion')
	def icon = data['icon'] ?: 'ic_custom_' + chanName
	def updateUri = data['updateUri'] ?: '//raw.githubusercontent.com/Mishiranu/Dashchan/master/update/data.json'
	def hosts = data['hosts'] ?: keyNotFound('hosts')
	def customUriHandler = data['customFilter'] ?: false
	def customFilter = data['customFilter']
	def chanTitle = hosts[0]

	def requiredClasses = ['ChanConfiguration', 'ChanLocator', 'ChanMarkup', 'ChanPerformer']
			.collect { packageName + '.' + chanNameUpper + it }

	def xml = '<?xml version="1.0" encoding="utf-8"?>\n' +
			'<manifest xmlns:android="http://schemas.android.com/apk/res/android" ' +
			"package=\"$packageName\" android:versionCode=\"1\" android:versionName=\"$versionName\">\n"
	xml += '<uses-feature android:name="chan.extension" />\n'
	xml += '<application android:icon="@null" android:allowBackup="false" ' +
			"android:label=\"Dashchan for ${chanTitle}\">\n"
	xml += "<meta-data android:name=\"chan.extension.name\" android:value=\"$chanName\" />\n"
	xml += "<meta-data android:name=\"chan.extension.title\" android:value=\"${chanTitle}\" />\n"
	xml += "<meta-data android:name=\"chan.extension.version\" android:value=\"$apiVersion\" />\n"
	xml += "<meta-data android:name=\"chan.extension.icon\" android:resource=\"@drawable/$icon\" />\n"
	xml += "<meta-data android:name=\"chan.extension.source\" android:value=\"$updateUri\" />\n"
	xml += '<meta-data android:name="chan.extension.class.configuration" ' +
			"android:value=\".${chanNameUpper}ChanConfiguration\" />\n"
	xml += '<meta-data android:name="chan.extension.class.performer" ' +
			"android:value=\".${chanNameUpper}ChanPerformer\" />\n"
	xml += '<meta-data android:name="chan.extension.class.locator" ' +
			"android:value=\".${chanNameUpper}ChanLocator\" />\n"
	xml += '<meta-data android:name="chan.extension.class.markup" ' +
			"android:value=\".${chanNameUpper}ChanMarkup\" />\n"
	xml += '<activity android:name="chan.application.UriHandlerActivity" ' +
			'android:label="Dashchan" android:theme="@android:style/Theme.NoDisplay">\n'
	xml += '<intent-filter>\n' +
			'<action android:name="android.intent.action.VIEW" />\n' +
			'<category android:name="android.intent.category.DEFAULT" />\n' +
			'<category android:name="android.intent.category.BROWSABLE" />\n'
	if (customFilter != null) {
		xml += customFilter
	} else {
		xml += '<data android:scheme="http" />\n' +
				'<data android:scheme="https" />\n'
		for (host in hosts) {
			xml += "<data android:host=\"$host\" />\n"
		}
	}
	xml += '</intent-filter>\n</activity>\n</application>\n</manifest>\n'

	def proguard = '-dontobfuscate\n' + requiredClasses
			.collect { '-keep class ' + it + ' { *; }\n' }.join()

	def manifestFile = new File(project.buildDir, 'generated/AndroidManifest.xml')
	def proguardFile = new File(project.buildDir, 'generated/proguard-rules.pro')
	if (!manifestFile.exists()) {
		// Fixes IntelliJ Android plugin error
		manifestFile.parentFile.mkdirs()
		manifestFile.write('<?xml version="1.0" encoding="utf-8"?>\n' +
				'<manifest xmlns:android="http://schemas.android.com/apk/res/android" ' +
				"package=\"$packageName\" />")
	}

	project.preBuild.dependsOn(project.task('generateManifest', type: GenerateFileTask) {
		inputText = xml
		outputFile = manifestFile
	})
	project.preBuild.dependsOn(project.task('generateProguard', type: GenerateFileTask) {
		inputText = proguard
		outputFile = proguardFile
	})

	project.archivesBaseName = 'Dashchan' + chanNameUpper
	configureCommon(project, manifestFile)

	project.android {
		defaultConfig {
			// Don't warn about unused classes
			buildConfigField 'Class[]', 'USED_CLASSES',
					'{' + requiredClasses.collect { it + '.class' }.join(', ') + '}'
		}

		if (file('keystore.properties').exists()) {
			def keystoreProperties = new Properties()
			keystoreProperties.load(new FileInputStream(file('keystore.properties')))

			signingConfigs {
				general {
					storeFile file(keystoreProperties['store.file'])
					storePassword keystoreProperties['store.password']
					keyAlias keystoreProperties['key.alias']
					keyPassword keystoreProperties['key.password']
				}
			}

			buildTypes.debug.signingConfig signingConfigs.general
			buildTypes.release.signingConfig signingConfigs.general
		}

		buildTypes {
			debug {
				minifyEnabled false
			}
			release {
				minifyEnabled true
			}
			all {
				crunchPngs false
				proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardFile
			}
		}

		lintOptions {
			abortOnError false
			disable 'MissingTranslation'
		}
	}

	project.dependencies {
		compileOnly project.project(':libraries:api')
		if (!customUriHandler) {
			implementation project.project(':libraries:urihandler')
		}
	}
}
